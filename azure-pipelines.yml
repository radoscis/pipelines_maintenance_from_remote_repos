trigger: none
pool:
    vmImage: 'ubuntu-latest'
variables:
    - group: GitHub
    - group: DEFAULT_PROJECT_SETTINGS

stages:
- stage: Add_and_configure_AZ_DevOps_extension
  jobs:
  - job: Add_and_configure_AZ_DevOps_extension
    steps:
        # Updating the python version available on the linux agent
      - checkout: self
        submodules: true
        persistCredentials: true
      # - script: |
      #     git config --global user.email $(GH_USER_MAIL)
      #     git config --global user.name $(GH_USER_NAME)
        displayName: "Configure git"
      - script: |
          sudo apt-get update
          sudo apt-get -y install tree
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          architecture: 'x64'
      # Updating pip to latest
      - script: python -m pip install --upgrade pip
        displayName: 'Upgrade pip'
        # Updating to latest Azure CLI version.
      - script: pip install --pre azure-cli --extra-index-url https://azurecliprod.blob.core.windows.net/edge
        displayName: 'upgrade azure cli'
      - script: az --version
        displayName: 'Show Azure CLI version'
      - script: az extension add -n azure-devops
        displayName: 'Install Azure DevOps Extension'
      - script: echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
        env:
          AZURE_DEVOPS_CLI_PAT: $(AZ_PAT)
        displayName: 'Login Azure DevOps Extension'
      - script: az devops configure --defaults organization=$(AZ_ORGANIZATION) project=$(AZ_PROJECT) --use-git-aliases true
        displayName: 'Set default Azure DevOps organization and project'
      - script: |
            set +e ;
            curl --silent  https://radoscis:$GH_USER_TOKEN@api.github.com/users/radoscis/repos?visibility=public
            curl --silent  https://radoscis:$GH_USER_TOKEN@api.github.com/users/radoscis/repos?visibility=public  | jq -r '.[] | {repo_url: .html_url, repo_name: .name} | select( .repo_name | contains("docker_")) | [.repo_url, .repo_name] | @csv' | tr -d '"' | awk -F "," '{print $1 " " $2}' | while read repo_url repo_name; do
              echo "repo url = $repo_url, repo name = $repo_name"
              repo_address=${repo_url#https://}
              echo "repo_address = $repo_address"
              git clone https://dummyuser:$GH_USER_TOKEN@${repo_address}
              pipeline_ini="$repo_name/azure-pipelines.ini"
              INI_CONTENT=$(sed "s/;/#/g;s/\\s*=\\s*/=/g;/\\[/d" ${pipeline_ini})
              eval "$INI_CONTENT"
              az pipelines list | grep -E "\"name\":\s\"${pipeline_name}\","
                if [ $? -ne 0 ]; then
                  az pipelines create --name $pipeline_name --description "$pl_description" \
                  --repository $repo_url --branch master --repository-type github \
                  --service-connection $(AZ_REPO_ENDPOINT_ID) \
                  --yml-path azure-pipelines.yml
                else
                  pid=$(az pipelines list --name $pipeline_name --query  "[].id[]" | grep -E -v "\\[|\\]")
                  echo "params = $pid, $pipeline_name , $pl_description,  $(AZ_REPO_ENDPOINT_ID), $(Build.Repository.Uri) , $(Build.SourceBranchName)"
                  az pipelines update --id $pid --description "$pl_description" --yml-path azure-pipelines.yml
                fi;
            done
        env:
          AZURE_DEVOPS_CLI_PAT: $(AZ_PAT)
          GH_USER_TOKEN: $(GH_TOKEN)
      - script: |
            tree /home/vsts/work/1/s




